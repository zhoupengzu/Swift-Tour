协议可以被类、结构体和枚举遵守，多个协议之间使用逗号分开即可
语法：
protocol SomeProtocol {
    // protocol definition goes here
}
如果它遵守多个协议，或者同时有父类：
class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {
    // class definition goes here
}

****** class 修饰的类方法可以被子类重写，static修饰的不可以 ************
****** class 不能修饰原类的属性，static可以 ************

一、属性要求
协议可以定义实例属性或者类属性，而且它也不明确指出该属性是存储属性还是计算属性，只是指出其需要实现set还是get方法；
** 对于类属性，用static，不能用class（貌似swift4不允许的）；
** 如果协议要求属性是可读可写的，那么该属性不能是常量属性或只读的计算型属性。如果协议只要求属性是可读的，那么该属性不仅可以是可读的，如果代码需要的话，还可以是可写的
** 属性不能是let，只能是var；
** 属性不能只是set，如果是set，则必须还得有get；而有了get则可以不要set
protocol SomeProtocol {
    var mustBeSettable: Int { get set }
    var doesNotNeedToBeSettable: Int { get }
}

例子：
protocol Protocol01 {
    var name: String{ get set };
    var age: Int{ get };
    var address: String { get };
    static var classVar: String { get set };
}

class ProtocolClass: Protocol01{
//    var name: String = "";  //存储属性
    var name: String {         //计算属性
        get {
            return "";
        }
        set {

        }
    }
    var age: Int{
        return 20;
    }
    var address: String{
        get {
            return self.name;
        }
        set {
            self.name = newValue;
        }
    }
    static var classVar: String {
        set {

        }
        get {
            return "";
        }
    }
}
