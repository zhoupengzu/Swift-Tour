协议可以被类、结构体和枚举遵守，多个协议之间使用逗号分开即可;
** 协议中的构造器不能使用convenience
** 协议之间可以继承
语法：
protocol SomeProtocol {
    // protocol definition goes here
}
如果它遵守多个协议，或者同时有父类：
class SomeClass: SomeSuperclass, FirstProtocol, AnotherProtocol {
    // class definition goes here
}

****** class 修饰的类方法可以被子类重写，static修饰的不可以 ************
****** class 不能修饰原类的存储属性，只能修饰计算属性，static可以 ************

一、属性要求
协议可以定义实例属性或者类属性，而且它也不明确指出该属性是存储属性还是计算属性，只是指出其需要实现set还是get方法；
** 对于类属性，用static，在遵守的协议中可以用static，也可以用class修饰该属性；
** 如果协议要求属性是可读可写的，那么该属性不能是常量属性或只读的计算型属性。如果协议只要求属性是可读的，那么该属性不仅可以是可读的，如果代码需要的话，还可以是可写的
** 协议中属性不能是let，只能是var；
** 属性不能只是set，如果是set，则必须还得有get；而有了get则可以不要set
protocol SomeProtocol {
    var mustBeSettable: Int { get set }
    var doesNotNeedToBeSettable: Int { get }
}

例子：
protocol Protocol01 {
    var name: String{ get set };
    var age: Int{ get };
    var address: String { get };
    static var classVar: String { get set };
}

class ProtocolClass: Protocol01{
//    var name: String = "";  //存储属性
    var name: String {         //计算属性
        get {
            return "";
        }
        set {

        }
    }
    var age: Int{
        return 20;
    }
    var address: String{
        get {
            return self.name;
        }
        set {
            self.name = newValue;
        }
    }
    static var classVar: String {
        set {

        }
        get {
            return "";
        }
    }
}

二、方法要求
可以定义实例方法和类方法，和普通方法比起来，不用达括号，不支持给协议中的方法的参数设置默认值。
** 协议中的类方法不允许用class，只能用static，但是该类方法在遵守协议的类中，可以用static，也可以用class
** 对于值类型的遵守了的协议，其如果修改self的值（属性），需要mutating；

三、构造函数要求
在协议中定义的构造函数和在类中定义一样，只是不需要大括号和其中的函数体

1、构造函数在类中的要求
** 在遵循协议的类中实现构造器，无论是作为指定构造器，还是作为便利构造器。无论哪种情况，你都必须 为构造器实现标上 required 修饰符，
** 用来保证其所有的子类都实现该构造器，当然如果添加了final修饰，则不再需要required修饰(???????貌似还是需要啊)
** 子类再实现该构造器，不再需要显示的写明override，系统会自动添加
** 如果该类的父类和遵守的协议都实现了相同的构造器，则，必须写override
** 协议中定义的非可失败构造器要求可以通过非可失败构造器( init )或隐式解包可失败构造器( init! )来满足
class SomeClass: SomeProtocol {
    required init(someParameter: Int) {
// 这里是构造器的实现部分
    }
}

protocol BaseProtocol{
    init();
}
class BaseClass{
    init() {

    }
}
class BaseSubClass: BaseClass,BaseProtocol{
    required override init() {
        super.init();
    }
}

2、可失败构造器的要求
遵循协议的类型可以通过可失败构造器( init? )或非可失败构造器( init )来满足协议中定义的可失败构造器 要求
protocol BaseProtocol{
    init();
    init?(name:String);
}
class BaseClass{
    init() {

    }
}

class BaseSubClass: BaseClass,BaseProtocol{
    required override init() {
        super.init();
    }
//    required init(name: String) {
//
//    }
    //或
    required init?(name: String) {

    }
}

四、协议作为类型
类似于delegate

五、只能是类遵守的协议
在协议后面添加AnyObject
protocol BaseProtocol: AnyObject{  //添加AnyObject，表明该协议只能被类遵守，值类型(枚举和结构体)的不能遵守
    init();
    init?(name:String);
}

六、一个变量遵守多个协议的写法
该变量的类型的几个协议使用&分割开即可
protocol Named {
    var name: String { get }
}
protocol Aged {
    var age: Int { get }
}
struct Person: Named, Aged {
    var name: String
    var age: Int
}
func wishHappyBirthday(to celebrator: Named & Aged) {
    print("Happy birthday, \(celebrator.name), you're \(celebrator.age)!")
}
let birthdayPerson = Person(name: "Malcolm", age: 21)
wishHappyBirthday(to: birthdayPerson)

七、协议的检测，检测是否遵守了某个协议、协议的转换
依旧是使用is、as！、as？，用法一样

八、可选协议的要求（关键词optional）
对于可选的协议（不需要类去实现的），可以使用optional修饰；
协议名之前的@objc和optional前的@objc都不能省略
使用：
@objc protocol BaseProtocol: AnyObject{  //添加AnyObject，表明该协议只能被类遵守，值类型(枚举和结构体)的不能遵守
    init();
    init?(name:String);  //构造函数不能用optional
    @objc optional func testOptional();
}

** 协议可以定义可选要求，遵循协议的类型可以选择是否实现这些要求。在协议中使用 optional 关键字作为前缀 来定义可选要求。
可选要求用在你需要和 Objective-C 打交道的代码中。协议和可选要求都必须带上 @objc 属 性。
** 标记 @objc 特性的协议只能被继承自 Objective-C 类的类或者 @objc 类遵循，其他类以及结构体和枚举 均不能遵循这种协议。
使用可选要求时(例如，可选的方法或者属性)，它们的类型会自动变成可选的。比如，一个类型为
(Int) -> String 的方法会变成 ((Int) -> String)? 。需要注意的是整个函数类型是可选的，而不是函数的返回值。
** 协议中的可选要求可通过可选链式调用来使用，因为遵循协议的类型可能没有实现这些可选要求。类似 onalMethod?(someArgument) 这样，你可以在可选方法名称后加上 ? 来调用可选方法
