一、构造函数
和OC中的初始化不一样，swift的初始化函数没有return；
所有的非可选存储属性都必须在初始化完成后完成赋值。
一般来说，如果每次的初始化值都是相同的，比较推荐在定义的时候就赋值，不建议在构造函数中赋值

二、默认构造器

三、构造器代理
在一个构造函数中调用另一个构造函数，用来简化逻辑和简化代码。
1、值类型的构造器代理
因为值类型的不支持继承，所以其构造器调用比较简单，只是自己内部的调用；
且构造器之间的调用只能在构造函数中使用
struct StruConstructor01{
    init() {

    }
    init(name: String){
        self.init();
    }
    func testInitFunc(){
//        self.init();// error 只能在构造器中调用
    }
}


2、引用类型的构造器代理（指定构造器和便利构造器（convenience））
因为引用类型可以继承，所以其构造器代理相对较复杂，需要遵守一定的规定。
指定构造器是一个类中的基础的构造器，一个指定构造器将初始化类中提供的所有属性，并根据父类链往上调用父类的构造器来实现父类的初始化。
便利构造器是次要的、辅助性的构造器，在同一个类中，便利构造器可以调用自己的指定构造器来初始化一些基础数据，你也可以定义便利构造器来创建一个特殊用途或特定输入值的实例
应该在需要的时候再定义便利构造器

* 每个类都必须拥有一个指定构造器。通常情况下，许多类通过继承父类的指定构造器来满足这个条件；

构造器调用规则：
1
