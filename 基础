swift新增了一些基础数据类型：Int、Double、Float、Bool、String，集合：Array、Set、Dictionary（貌似都是值引用，不是对象引用）
除此外，还提供了：
（1）tuple（元祖）,一个可以一次性传递一组数据的类型；
（2）可选类型。它的使用和OC中的nil相似，但是它更强大，不止用于类或者对象，可以用于任何类型。

一、常量和变量（let、var）
1、常量和变量在使用前必须声明
2、常量一旦被赋值，则在后续不允许再次赋值或者修改
3、声明时可以注明类型
let或者var 变量名：（空格）类型 
4、常量和变量的名字几乎可以是任意字符，包括Unicode码
对于保留字或者关键词，可以用反单引号引起来，如：let `if` = 3;

二、整数（Integers）
使用Int 和 UInt 即可，最小为：Int.min，最大为：Int.max，它会根据平台的位数，自动转换为Int32、Int64、UInt32、UInt64等

三、浮点数（Float-Point Numbers）
Double 和 Float。
注：对于没有明确指明类型的小数，swift都会推断为Double。

四、别名（Type Aliases）
关键词：typealias,如：typealias AudioSample = UInt16，则后面就可以直接使用AudioSample表示UInt16了

五、元祖（tuples）
元祖中的类型是多样的，个数是不定的
1、定义
有一个值，用小括号阔起来的，里面的多个值是用逗号分开的，这个值就是元祖：
let http404Error = (404, "Not Found")
2、使用（一般多用于某个方法的多个变量的返回）
（1）可以直接用对应的变量设置，见useTuple01（）
（2）可以只对需要使用的变量定义变量名字，不需要的用下划线代替即可，但是元祖值有几个，就需要前后个数对应起来，见useTuple02（）
（3）可以直接使用index访问，index从0开始，见defineTuples（）
（4）可以在定义元祖值的时候就直接指定好名字，有点儿类似于字典，见useTuple03（）
class Tuples01{
    static func defineTuples(){
        let tuple01 = (404,"Not Found");
        print(tuple01.0);
    }
    static func useTuple01(){
        let (code,des) = (404,"Not Found");
        print(code);
    }
    static func useTuple02(){
        let (code,_) = (404,"Not Found");
//        let (code: Int,_) = (404,"Not Found");  //error
//        let (code,_) = (404,"Not Found","more");  //error
        print(code);
    }
    static func useTuple03(){
        let net = (code:404,des:"Not Found");
        let net1 = (_:404,des:"Not Found");
        print(net.des);
        print(net1.des);
    }
}
