一、解决强引用环
有两种方式：弱引用和非拥有对象（无主引用）
当其他的实例有更短的生命周期时，使用弱引用，也就是说，当其他实例析构在先时；当其他实例有相同的或者更长生命周期时，请使用无主引用

1、弱引用（weak）
class Person {
    let name: String
    init(name: String) { self.name = name }
    var apartment: Apartment?
    deinit { print("\(name) is being deinitialized") }
}
 
class Apartment {
    let unit: String
    init(unit: String) { self.unit = unit }
    weak var tenant: Person?
    deinit { print("Apartment \(unit) is being deinitialized") }
}

***** 当 ARC 设置弱引用为 nil 时，属性观察不会被触发。********

2、无主引用（unowned）
无主引用被期望永远有值，所以它修饰的不能是可选类型的，因为可选类型的会在运行时被赋值为nil
使用无主引用，你必须确保引用始终指向一个未销毁的实例。如果你试图在实例被销毁后，访问该实例的无主引用，会触发运行时错误

class Customer {
    let name: String
    var card: CreditCard?
    init(name: String) {
        self.name = name
    }
    deinit { print("\(name) is being deinitialized") }
}
 
class CreditCard {
    let number: UInt64
    unowned let customer: Customer
    init(number: UInt64, customer: Customer) {
        self.number = number
        self.customer = customer
    }
    deinit { print("Card #\(number) is being deinitialized") }
}

二、无主引用以及隐式解析可选属性
class Country {
    let name: String
    var capitalCity: City!    //这里的感叹号表示隐式解析可选类型的，否则在初始化的时候不能使用self，因为此时该值还没有被初始化
    init(name: String, capitalName: String) {
        self.name = name
        self.capitalCity = City(name: capitalName, country: self)
    }
}
 
class City {
    let name: String
    unowned let country: Country
    init(name: String, country: Country) {
        self.name = name
        self.country = country
    }
}

三、解决闭包中的循环引用
[unowned self, weak delegate = self.delegate!]被称为捕获列表，可以发现都是一些对象，所以需要对可能造成循环引用的对象进行unowned 或 weak即可；
以下如果不使用lazy会编译错误，因为此时初始化并未完成，没办法使用self，所以需要延后其加载时间，有两个办法：
一个是使用懒加载，一个是使用隐式解析
lazy var someClosure: (Int, String) -> String = {
    [unowned self, weak delegate = self.delegate!] (index: Int, stringToProcess: String) -> String in
    // closure body goes here
}
或者
lazy var someClosure: () -> String = {
    [unowned self, weak delegate = self.delegate!] in
    // closure body goes here
}

如：
class StrongCycle01{
    var name = "";
    var temp: String! = "";
    lazy var tempClosure : () -> String = { [unowned self] in return self.name;};
//    var tempClosure02: (() -> String)! = {[unowned self] in return self.name };  //error
    var tempClosure02: (() -> String)!;
    init() {
        self.tempClosure02 = {
            [unowned self] in
            return self.name;
        }
    }
    func test(){
        if tempClosure02 != nil{
            tempClosure02();  //使用前需要判空
        }

    }
    deinit {
        print("释放了。。。");
    }
}

1、弱引用和无主引用
在闭包和捕获的实例总是互相引用并且总是同时销毁时，将闭包内的捕获定义为 无主引用 。 
相反的，在被捕获的引用可能会变为 nil 时，将闭包内的捕获定义为 弱引用 。弱引用总是可选类型，并且当引用
的实例被销毁后，弱引用的值会自动置为 nil 。这使我们可以在闭包体内检查它们是否存在
