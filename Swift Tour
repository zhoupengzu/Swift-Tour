一、简单值
1、let和var
	用let定义一个常量，初始化时可以不赋值，但是一旦赋值就不能再改变（问题：let修饰的数组字典之类的，内容是否可以改变？）;
	用var定义一个变量，可以随时改变其值
        无论是let还是var，不用显示的指出其类型，因为编译器会根据您的赋值推测出该变量的类型，并且对于var，不能再改变其值类型
2、字符串中拼接其他类型的快捷方式（\）
  将要拼接的值直接用“\(变量)”拼接，如：
        let apples = 3
        let appleSummary = "I have \(apples) apples."
3、三个双引号（“”“）
	用三个双引号来展示多行字符串,但是最开始的三个和结束的三个双引号要单独成行,且通过“\n”切分成数组会发现，内容是自动添加了“\n”的，所以下面的内容数组个数是2
	如：
	class ThreeQuotes{
    static let threeQuotes = """
	hahahhahah
	other line
	""";
    static func printThreeQuotes(){
        let arr: Array = threeQuotes.components(separatedBy: "\n");
        print(arr.count);  //2
        print(threeQuotes);
    }
}
4、数组和字典创建
let修饰的是不能修改的
（1）数组和字典都直接用中括号"[]"创建
var shoppingList = ["catfish", "water", "tulips", "blue paint"]
shoppingList[1] = "bottle of water".  //修改
 
var occupations = [
    "Malcolm": "Captain",
    "Kaylee": "Mechanic",
]
occupations["Jayne"] = "Public Relations"。//可以添加和修改，此处是添加

******************************
注意：以下数组会崩溃
var arr01 = ["1","2","3"];
        arr01[5] = "5";
	
（2）定义空数组和空字典(以下不能用let，因为一旦初始化后就不能添加内容了)
let emptyArray = [String]()
let emptyDictionary = [String: Float]()

*****************
思考以下输出（值引用，怎么转成对象引用）：
class DicAndStu01 {
    static func componentDicAndArr(){
        var dic = ["1":"1"];
        let arr = [dic];
        var dic1 = arr[0];
        dic1["2"] = "2";
        print(arr);  //[["1": "1"]]
        print(dic1); //["2": "2", "1": "1"]
        print(dic);  //["1": "1"]
        dic["3"] = "3";
        print(arr);  //[["1": "1"]]
    }
}
