可以给类、结构体、枚举和协议添加扩展来丰富其功能
swift中的扩展可以做以下的事：
1、可以添加计算属性的实例对象或者类对象
2、可以定义实例方法和类方法
3、提供新的构造函数（类只能添加便利构造器，类的指定构造器只能由原类提供；值类型的可以添加自己的构造器（除指定构造器外），而不用表明convenience，因为值类型的没有便利构造器）
4、定义索引函数
5、定义和使用新的嵌套类型（？？？）
6、使一个已有类型遵循某个协议

*****扩展可以为一个类型添加新的功能，但是不能重写已有的功能
如果你使用扩展为一个值类型添加构造器，同时该值类型的原始实现中未定义任何定制的构造器且所有存储属性
提供了默认值，那么我们就可以在扩展中的构造器里调用默认构造器和逐一成员构造器，否则，需要调用实现的构造器

class OriginClass01{
    func testFunc(){
        _ = OriginStruct01.init(name: "");
    }
}

extension OriginClass01{
    convenience init(name: String) {
        self.init();
    }
}

struct OriginStruct01{
    var name: String;
    init() {
        self.name = "";
    }
    init(name:String,age:Int){
        self.name = name;
    }
}

extension OriginStruct01{
    init(name: String?) {  //值类型的没有convenience
        self.init();
    }
}

一、语法
extension SomeType {
    // new functionality to add to SomeType goes here
}

如果该扩展遵循某些协议：
extension SomeType: SomeProtocol, AnotherProtocol {
    // implementation of protocol requirements goes here
}
